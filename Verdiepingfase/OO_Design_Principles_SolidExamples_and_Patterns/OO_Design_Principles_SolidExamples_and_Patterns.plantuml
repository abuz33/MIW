@startuml

title __OO_DESIGN_PRINCIPLES_SOLIDEXAMPLES's Class Diagram__\n

  namespace Facade_MetInterface {
    class Facade_MetInterface.StartWithMain {
    }
  }
  

  namespace designprinciples {
    class designprinciples.Pizza {
    }
  }
  

  namespace designprinciples {
    class designprinciples.TomatoSaucePizza {
    }
  }
  

  namespace fromsheets.drawingcontroller {
    class fromsheets.drawingcontroller.Drawing {
    }
  }
  

  namespace fromsheets.drawingcontroller {
    namespace withMediator {
      class fromsheets.drawingcontroller.withMediator.DrawingController {
      }
    }
  }
  

  namespace fromsheets.drawingcontroller {
    namespace withMediator {
      interface fromsheets.drawingcontroller.withMediator.PersistencyMediator {
      }
    }
  }
  

  namespace fromsheets.drawingcontroller {
    namespace withoutMediator {
      class fromsheets.drawingcontroller.withoutMediator.DrawingController {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    abstract class patterns.abstractfactory.AbstractFactory {
    }
  }
  

  namespace patterns.abstractfactory {
    class patterns.abstractfactory.AbstractFactoryPatternDemo {
    }
  }
  

  namespace patterns.abstractfactory {
    class patterns.abstractfactory.FactoryProducer {
    }
  }
  

  namespace patterns.abstractfactory {
    interface patterns.abstractfactory.IShape {
    }
  }
  

  namespace patterns.abstractfactory {
    enum ShapeType {
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory1 {
      class patterns.abstractfactory.factory1.Circle {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory1 {
      class patterns.abstractfactory.factory1.Rectangle {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory1 {
      class patterns.abstractfactory.factory1.ShapeFactory {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory1 {
      class patterns.abstractfactory.factory1.Square {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory2 {
      class patterns.abstractfactory.factory2.RoundedCircle {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory2 {
      class patterns.abstractfactory.factory2.RoundedRectangle {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory2 {
      class patterns.abstractfactory.factory2.RoundedShapeFactory {
      }
    }
  }
  

  namespace patterns.abstractfactory {
    namespace factory2 {
      class patterns.abstractfactory.factory2.RoundedSquare {
      }
    }
  }
  

  namespace patterns.command.lunchroom {
    class patterns.command.lunchroom.BurgerAndFriesOrder {
    }
  }
  

  namespace patterns.command.lunchroom {
    class patterns.command.lunchroom.Klant {
    }
  }
  

  namespace patterns.command.lunchroom {
    class patterns.command.lunchroom.Kok {
    }
  }
  

  namespace patterns.command.lunchroom {
    class patterns.command.lunchroom.LunchRoom {
    }
  }
  

  namespace patterns.command.lunchroom {
    interface patterns.command.lunchroom.Order {
    }
  }
  

  namespace patterns.command.lunchroom {
    class patterns.command.lunchroom.Serveerster {
    }
  }
  

  namespace patterns.decorator.pizza {
    class patterns.decorator.pizza.Cheese {
    }
  }
  

  namespace patterns.decorator.pizza {
    class patterns.decorator.pizza.Olives {
    }
  }
  

  namespace patterns.decorator.pizza {
    abstract class patterns.decorator.pizza.Pizza {
    }
  }
  

  namespace patterns.decorator.pizza {
    class patterns.decorator.pizza.PizzaStore {
    }
  }
  

  namespace patterns.decorator.pizza {
    class patterns.decorator.pizza.ThickCrustPizza {
    }
  }
  

  namespace patterns.decorator.pizza {
    class patterns.decorator.pizza.ThincrustPizza {
    }
  }
  

  namespace patterns.decorator.pizza {
    abstract class patterns.decorator.pizza.ToppingDecorator {
    }
  }
  

  namespace patterns.decorator.withinheritance {
    class patterns.decorator.withinheritance.Cheese {
    }
  }
  

  namespace patterns.decorator.withinheritance {
    class patterns.decorator.withinheritance.Olives {
    }
  }
  

  namespace patterns.decorator.withinheritance {
    abstract class patterns.decorator.withinheritance.Pizza {
    }
  }
  

  namespace patterns.decorator.withinheritance {
    class patterns.decorator.withinheritance.PizzaStore {
    }
  }
  

  namespace patterns.decorator.withinheritance {
    class patterns.decorator.withinheritance.ThickcrustPizza {
    }
  }
  

  namespace patterns.decorator.withinheritance {
    class patterns.decorator.withinheritance.ThincrustPizza {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.CDSpeler {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.Lichten {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.PopcornPopper {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.Projector {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.Scherm {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.Tuner {
    }
  }
  

  namespace patterns.facade {
    class patterns.facade.Versterker {
    }
  }
  

  namespace patterns.facade {
    namespace solidoverwegingen {
      class patterns.facade.solidoverwegingen.GasLantaarn {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solidoverwegingen {
      class patterns.facade.solidoverwegingen.HomeTheater1930 {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solidoverwegingen {
      class patterns.facade.solidoverwegingen.LantaarnProjector {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solidoverwegingen {
      class patterns.facade.solidoverwegingen.Vrouw {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solidoverwegingen {
      class patterns.facade.solidoverwegingen.ZwengelGrammofoon {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solution {
      class patterns.facade.solution.HomeTheater {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solution {
      interface patterns.facade.solution.HomeTheaterInterface {
      }
    }
  }
  

  namespace patterns.facade {
    namespace solution {
      class patterns.facade.solution.Main {
      }
    }
  }
  

  namespace patterns.factory {
    class patterns.factory.Circle {
    }
  }
  

  namespace patterns.factory {
    class patterns.factory.FactoryPatternDemo_Client {
    }
  }
  

  namespace patterns.factory {
    interface patterns.factory.IShape {
    }
  }
  

  namespace patterns.factory {
    class patterns.factory.Rectangle {
    }
  }
  

  namespace patterns.factory {
    class patterns.factory.ShapeFactory {
    }
  }
  

  namespace patterns.factory {
    class patterns.factory.Square {
    }
  }
  

  namespace patterns.mvc {
    class patterns.mvc.Controller {
    }
  }
  

  namespace patterns.mvc {
    class patterns.mvc.Main {
    }
  }
  

  namespace patterns.mvc {
    class patterns.mvc.Model {
    }
  }
  

  namespace patterns.mvc {
    enum TrafficLight {
    }
  }
  

  namespace patterns.mvc {
    class patterns.mvc.View {
    }
  }
  

  namespace patterns.observer {
    class patterns.observer.Dobbelsteen {
    }
  }
  

  namespace patterns.observer {
    class patterns.observer.Main {
    }
  }
  

  namespace patterns.observer {
    class patterns.observer.aantalOgenView {
    }
  }
  

  namespace patterns.observer {
    class patterns.observer.argumentView {
    }
  }
  

  namespace patterns.singleton {
    class patterns.singleton.CasinoCashier {
    }
  }
  

  namespace patterns.strategy.pattern {
    class patterns.strategy.pattern.Drawing {
    }
  }
  

  namespace patterns.strategy.pattern {
    class patterns.strategy.pattern.DrawingController {
    }
  }
  

  namespace patterns.strategy.pattern {
    interface patterns.strategy.pattern.PersistencyMediator {
    }
  }
  

  namespace patterns.strategy.withinheritance {
    class patterns.strategy.withinheritance.Drawing {
    }
  }
  

  namespace patterns.strategy.withinheritance {
    class patterns.strategy.withinheritance.DrawingController {
    }
  }
  

  namespace solid.dependencyinversion.badexample {
    class solid.dependencyinversion.badexample.BusinessLogic {
    }
  }
  

  namespace solid.dependencyinversion.badexample {
    class solid.dependencyinversion.badexample.DB {
    }
  }
  

  namespace solid.dependencyinversion.badexample {
    class solid.dependencyinversion.badexample.UI {
    }
  }
  

  namespace solid.dependencyinversion.solution {
    class solid.dependencyinversion.solution.BusinessLogic {
    }
  }
  

  namespace solid.dependencyinversion.solution {
    class solid.dependencyinversion.solution.DB {
    }
  }
  

  namespace solid.dependencyinversion.solution {
    class solid.dependencyinversion.solution.UI {
    }
  }
  

  namespace solid.dependencyinversion.solution {
    interface solid.dependencyinversion.solution.interfaceDB {
    }
  }
  

  namespace solid.dependencyinversion.solution {
    interface solid.dependencyinversion.solution.interfaceUI {
    }
  }
  

  namespace solid.interfacesegregation.badexample {
    class solid.interfacesegregation.badexample.AContainer {
    }
  }
  

  namespace solid.interfacesegregation.badexample {
    class solid.interfacesegregation.badexample.AMachine {
    }
  }
  

  namespace solid.interfacesegregation.badexample {
    class solid.interfacesegregation.badexample.MUser {
    }
  }
  

  namespace solid.interfacesegregation.badexample {
    class solid.interfacesegregation.badexample.Operations {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    class solid.interfacesegregation.solution.AContainer {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    class solid.interfacesegregation.solution.AMachine {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    class solid.interfacesegregation.solution.MUser {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    class solid.interfacesegregation.solution.Operations {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    interface solid.interfacesegregation.solution.interfaceOperations1 {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    interface solid.interfacesegregation.solution.interfaceOperations2 {
    }
  }
  

  namespace solid.interfacesegregation.solution {
    interface solid.interfacesegregation.solution.interfaceOperations3 {
    }
  }
  

  namespace solid.liskov.badexample {
    class solid.liskov.badexample.Rectangle {
    }
  }
  

  namespace solid.liskov.badexample {
    class solid.liskov.badexample.RectangleTest {
    }
  }
  

  namespace solid.liskov.badexample {
    class solid.liskov.badexample.Square {
    }
  }
  

  namespace solid.liskov.solution {
    class solid.liskov.solution.Rectangle {
    }
  }
  

  namespace solid.liskov.solution {
    class solid.liskov.solution.Square {
    }
  }
  

  namespace solid.liskov.solution {
    class solid.liskov.solution.SquareTest {
    }
  }
  

  namespace solid.openclosed.badexample {
    class solid.openclosed.badexample.Circle {
    }
  }
  

  namespace solid.openclosed.badexample {
    class solid.openclosed.badexample.Main {
    }
  }
  

  namespace solid.openclosed.badexample {
    class solid.openclosed.badexample.Rectangle {
    }
  }
  

  namespace solid.openclosed.badexample {
    class solid.openclosed.badexample.Shape {
    }
  }
  

  namespace solid.openclosed.solution {
    class solid.openclosed.solution.Circle {
    }
  }
  

  namespace solid.openclosed.solution {
    class solid.openclosed.solution.Main {
    }
  }
  

  namespace solid.openclosed.solution {
    class solid.openclosed.solution.Rectangle {
    }
  }
  

  namespace solid.openclosed.solution {
    abstract class solid.openclosed.solution.Shape {
    }
  }
  

  namespace solid.singleresponsibility.badexample {
    class solid.singleresponsibility.badexample.Employee {
    }
  }
  

  namespace solid.singleresponsibility.badexample {
    class solid.singleresponsibility.badexample.MoneyAmount {
    }
  }
  

  namespace solid.singleresponsibility.badexample {
    class solid.singleresponsibility.badexample.Report {
    }
  }
  

  namespace solid.singleresponsibility.solution {
    class solid.singleresponsibility.solution.EmployeeData {
    }
  }
  

  namespace solid.singleresponsibility.solution {
    class solid.singleresponsibility.solution.EmployeeSaver {
    }
  }
  

  namespace solid.singleresponsibility.solution {
    class solid.singleresponsibility.solution.HourReporter {
    }
  }
  

  namespace solid.singleresponsibility.solution {
    class solid.singleresponsibility.solution.PayCalculator {
    }
  }
  

  designprinciples.TomatoSaucePizza -up-|> designprinciples.Pizza
  fromsheets.drawingcontroller.withMediator.DrawingController o-- fromsheets.drawingcontroller.Drawing : drawing
  fromsheets.drawingcontroller.withMediator.DrawingController o-- fromsheets.drawingcontroller.withMediator.PersistencyMediator : persistencyMediator
  fromsheets.drawingcontroller.withoutMediator.DrawingController o-- fromsheets.drawingcontroller.Drawing : drawing
  patterns.abstractfactory.factory1.Circle .up.|> patterns.abstractfactory.IShape
  patterns.abstractfactory.factory1.Rectangle .up.|> patterns.abstractfactory.IShape
  patterns.abstractfactory.factory1.ShapeFactory -up-|> patterns.abstractfactory.AbstractFactory
  patterns.abstractfactory.factory1.Square .up.|> patterns.abstractfactory.IShape
  patterns.abstractfactory.factory2.RoundedCircle .up.|> patterns.abstractfactory.IShape
  patterns.abstractfactory.factory2.RoundedRectangle .up.|> patterns.abstractfactory.IShape
  patterns.abstractfactory.factory2.RoundedShapeFactory -up-|> patterns.abstractfactory.AbstractFactory
  patterns.abstractfactory.factory2.RoundedSquare .up.|> patterns.abstractfactory.IShape
  patterns.command.lunchroom.BurgerAndFriesOrder .up.|> patterns.command.lunchroom.Order
  patterns.command.lunchroom.BurgerAndFriesOrder o-- patterns.command.lunchroom.Kok : kok
  patterns.command.lunchroom.Klant o-- patterns.command.lunchroom.Order : order
  patterns.command.lunchroom.Klant o-- patterns.command.lunchroom.Serveerster : serveerster
  patterns.command.lunchroom.Serveerster o-- patterns.command.lunchroom.Order : order
  patterns.decorator.pizza.Cheese -up-|> patterns.decorator.pizza.ToppingDecorator
  patterns.decorator.pizza.Olives -up-|> patterns.decorator.pizza.ToppingDecorator
  patterns.decorator.pizza.ThickCrustPizza -up-|> patterns.decorator.pizza.Pizza
  patterns.decorator.pizza.ThincrustPizza -up-|> patterns.decorator.pizza.Pizza
  patterns.decorator.pizza.ToppingDecorator -up-|> patterns.decorator.pizza.Pizza
  patterns.decorator.pizza.ToppingDecorator o-- patterns.decorator.pizza.Pizza : pizza
  patterns.decorator.withinheritance.ThickcrustPizza -up-|> patterns.decorator.withinheritance.Pizza
  patterns.decorator.withinheritance.ThincrustPizza -up-|> patterns.decorator.withinheritance.Pizza
  patterns.facade.solidoverwegingen.HomeTheater1930 .up.|> patterns.facade.solution.HomeTheaterInterface
  patterns.facade.solidoverwegingen.HomeTheater1930 o-- patterns.facade.solidoverwegingen.ZwengelGrammofoon : grammo
  patterns.facade.solidoverwegingen.HomeTheater1930 o-- patterns.facade.solidoverwegingen.GasLantaarn : licht
  patterns.facade.solidoverwegingen.HomeTheater1930 o-- patterns.facade.solidoverwegingen.LantaarnProjector : projector
  patterns.facade.solidoverwegingen.HomeTheater1930 o-- patterns.facade.solidoverwegingen.Vrouw : vrouw
  patterns.facade.solution.HomeTheater .up.|> patterns.facade.solution.HomeTheaterInterface
  patterns.facade.solution.HomeTheater o-- patterns.facade.CDSpeler : lnkCDSpeler
  patterns.facade.solution.HomeTheater o-- patterns.facade.Lichten : lnkLichten
  patterns.facade.solution.HomeTheater o-- patterns.facade.PopcornPopper : lnkPopcornPopper
  patterns.facade.solution.HomeTheater o-- patterns.facade.Projector : lnkProjector
  patterns.facade.solution.HomeTheater o-- patterns.facade.Scherm : lnkScherm
  patterns.facade.solution.HomeTheater o-- patterns.facade.Tuner : lnkTuner
  patterns.facade.solution.HomeTheater o-- patterns.facade.Versterker : versterker
  patterns.factory.Circle .up.|> patterns.factory.IShape
  patterns.factory.Rectangle .up.|> patterns.factory.IShape
  patterns.factory.Square .up.|> patterns.factory.IShape
  patterns.mvc.Controller .up.|> java.util.Observer
  patterns.mvc.Controller o-- patterns.mvc.Model : model
  patterns.mvc.Controller o-- patterns.mvc.View : ui
  patterns.mvc.Model -up-|> java.util.Observable
  patterns.mvc.Model o-- patterns.mvc.TrafficLight : trafficLight
  patterns.mvc.View o-- patterns.mvc.Controller : controller
  patterns.observer.Dobbelsteen -up-|> java.util.Observable
  patterns.observer.aantalOgenView .up.|> java.util.Observer
  patterns.observer.argumentView .up.|> java.util.Observer
  patterns.strategy.pattern.DrawingController o-- patterns.strategy.pattern.Drawing : drawing
  patterns.strategy.withinheritance.DrawingController o-- patterns.strategy.withinheritance.Drawing : drawing
  solid.dependencyinversion.badexample.BusinessLogic o-- solid.dependencyinversion.badexample.DB : database
  solid.dependencyinversion.badexample.BusinessLogic o-- solid.dependencyinversion.badexample.UI : ui
  solid.dependencyinversion.solution.BusinessLogic o-- solid.dependencyinversion.solution.interfaceDB : database
  solid.dependencyinversion.solution.BusinessLogic o-- solid.dependencyinversion.solution.interfaceUI : ui
  solid.dependencyinversion.solution.DB .up.|> solid.dependencyinversion.solution.interfaceDB
  solid.dependencyinversion.solution.UI .up.|> solid.dependencyinversion.solution.interfaceUI
  solid.interfacesegregation.badexample.AContainer o-- solid.interfacesegregation.badexample.Operations : ops
  solid.interfacesegregation.badexample.AMachine o-- solid.interfacesegregation.badexample.Operations : ops
  solid.interfacesegregation.badexample.MUser o-- solid.interfacesegregation.badexample.Operations : ops
  solid.interfacesegregation.solution.AContainer o-- solid.interfacesegregation.solution.interfaceOperations3 : ops
  solid.interfacesegregation.solution.AMachine o-- solid.interfacesegregation.solution.interfaceOperations2 : ops
  solid.interfacesegregation.solution.MUser o-- solid.interfacesegregation.solution.interfaceOperations1 : ops
  solid.interfacesegregation.solution.Operations .up.|> solid.interfacesegregation.solution.interfaceOperations1
  solid.interfacesegregation.solution.Operations .up.|> solid.interfacesegregation.solution.interfaceOperations2
  solid.interfacesegregation.solution.Operations .up.|> solid.interfacesegregation.solution.interfaceOperations3
  solid.liskov.badexample.Square -up-|> solid.liskov.badexample.Rectangle
  solid.liskov.solution.Rectangle -up-|> solid.liskov.solution.Square
  solid.openclosed.badexample.Circle -up-|> solid.openclosed.badexample.Shape
  solid.openclosed.badexample.Rectangle -up-|> solid.openclosed.badexample.Shape
  solid.openclosed.solution.Circle -up-|> solid.openclosed.solution.Shape
  solid.openclosed.solution.Rectangle -up-|> solid.openclosed.solution.Shape
  solid.singleresponsibility.solution.EmployeeSaver o-- solid.singleresponsibility.solution.EmployeeData : data
  solid.singleresponsibility.solution.HourReporter o-- solid.singleresponsibility.solution.EmployeeData : data
  solid.singleresponsibility.solution.PayCalculator o-- solid.singleresponsibility.solution.EmployeeData : data


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
